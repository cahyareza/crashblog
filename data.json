[{"model": "contenttypes.contenttype", "pk": 1, "fields": {"app_label": "admin", "model": "logentry"}}, {"model": "contenttypes.contenttype", "pk": 2, "fields": {"app_label": "auth", "model": "permission"}}, {"model": "contenttypes.contenttype", "pk": 3, "fields": {"app_label": "auth", "model": "group"}}, {"model": "contenttypes.contenttype", "pk": 4, "fields": {"app_label": "auth", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 5, "fields": {"app_label": "contenttypes", "model": "contenttype"}}, {"model": "contenttypes.contenttype", "pk": 6, "fields": {"app_label": "sessions", "model": "session"}}, {"model": "contenttypes.contenttype", "pk": 7, "fields": {"app_label": "blog", "model": "category"}}, {"model": "contenttypes.contenttype", "pk": 8, "fields": {"app_label": "blog", "model": "post"}}, {"model": "contenttypes.contenttype", "pk": 9, "fields": {"app_label": "blog", "model": "comment"}}, {"model": "sessions.session", "pk": "m9kvhjl1zxpip7ze9rh881qazy03iv1f", "fields": {"session_data": "ZDM5OWQ2NmEyMjNmODJkODJiYjI2ZGRkMWFiNDk1MDFlZmI1NGIyZTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI0MTZkMTIwMzkzY2Q0MjE4YjdmYzkwZmE0MDNiNDA3NDliYjBjM2NlIn0=", "expire_date": "2022-01-18T15:02:14.515Z"}}, {"model": "blog.category", "pk": 1, "fields": {"parent": null, "title": "Django", "slug": "django"}}, {"model": "blog.category", "pk": 2, "fields": {"parent": null, "title": "Python", "slug": "python"}}, {"model": "blog.comment", "pk": 1, "fields": {"post": 3, "name": "Joko", "email": "cf.joko@gmail.com", "body": "Good article", "created_at": "2022-01-09T20:26:58.087Z", "updated_at": "2022-01-09T20:51:32.848Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 2, "fields": {"post": 3, "name": "Joko", "email": "cf.joko@gmail.com", "body": "Good article", "created_at": "2022-01-09T20:27:43.476Z", "updated_at": "2022-01-09T20:51:32.848Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 3, "fields": {"post": 3, "name": "joko", "email": "cf.joko@gmail.com", "body": "good", "created_at": "2022-01-09T20:58:07.519Z", "updated_at": "2022-01-09T20:58:07.519Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 4, "fields": {"post": 3, "name": "cahya", "email": "cf@gmail.com", "body": "new", "created_at": "2022-01-09T21:54:23.437Z", "updated_at": "2022-01-09T21:54:23.438Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 5, "fields": {"post": 3, "name": "", "email": "", "body": "", "created_at": "2022-01-10T02:25:49.008Z", "updated_at": "2022-01-10T02:25:49.034Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 6, "fields": {"post": 3, "name": "", "email": "", "body": "", "created_at": "2022-01-10T02:25:58.626Z", "updated_at": "2022-01-10T02:25:58.628Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 7, "fields": {"post": 3, "name": "", "email": "", "body": "", "created_at": "2022-01-10T02:53:22.440Z", "updated_at": "2022-01-10T02:53:22.443Z", "active": true, "reply": 1}}, {"model": "blog.comment", "pk": 8, "fields": {"post": 3, "name": "", "email": "", "body": "", "created_at": "2022-01-10T02:56:04.894Z", "updated_at": "2022-01-10T02:56:04.897Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 9, "fields": {"post": 3, "name": "asus", "email": "asus@gmail.com", "body": "aaaa", "created_at": "2022-01-10T03:07:21.325Z", "updated_at": "2022-01-10T03:07:21.325Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 10, "fields": {"post": 3, "name": "joko", "email": "asus@gmail.com", "body": "aaaa", "created_at": "2022-01-10T03:07:49.005Z", "updated_at": "2022-01-10T03:07:49.005Z", "active": true, "reply": 1}}, {"model": "blog.comment", "pk": 11, "fields": {"post": 3, "name": "mmm", "email": "mmm@gmail.com", "body": "hbhbjsbjdbd", "created_at": "2022-01-10T03:09:35.403Z", "updated_at": "2022-01-10T03:09:35.403Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 12, "fields": {"post": 3, "name": "coba", "email": "coba@gmail.com", "body": "hbdbkbkdw", "created_at": "2022-01-10T03:11:44.524Z", "updated_at": "2022-01-10T03:11:44.524Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 13, "fields": {"post": 3, "name": "coba", "email": "coba@gmail.com", "body": "n , sacas", "created_at": "2022-01-10T03:15:30.900Z", "updated_at": "2022-01-10T03:15:30.900Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 14, "fields": {"post": 1, "name": "coba", "email": "coba@gmail.com", "body": "jsbjbjdbw", "created_at": "2022-01-10T03:16:57.473Z", "updated_at": "2022-01-10T03:16:57.473Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 15, "fields": {"post": 1, "name": "coba", "email": "coba@gmail.com", "body": "bjkbwdkw", "created_at": "2022-01-10T03:20:06.982Z", "updated_at": "2022-01-10T03:20:06.982Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 16, "fields": {"post": 1, "name": "coba", "email": "coba@gmail.com", "body": "bjkbwdkw", "created_at": "2022-01-10T03:22:15.978Z", "updated_at": "2022-01-10T03:22:15.978Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 17, "fields": {"post": 1, "name": "joko", "email": "joko@gmail.com", "body": "jjwbdjwd", "created_at": "2022-01-10T03:26:03.898Z", "updated_at": "2022-01-10T03:26:03.898Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 18, "fields": {"post": 1, "name": "Joko", "email": "joko@gmail.com", "body": "asem banget", "created_at": "2022-01-10T03:32:26.662Z", "updated_at": "2022-01-10T03:32:26.662Z", "active": true, "reply": 14}}, {"model": "blog.comment", "pk": 19, "fields": {"post": 1, "name": "Bintang", "email": "bintang@gmail.com", "body": "bintang kejora", "created_at": "2022-01-10T03:34:14.597Z", "updated_at": "2022-01-10T03:34:14.597Z", "active": true, "reply": 14}}, {"model": "blog.comment", "pk": 20, "fields": {"post": 1, "name": "angga", "email": "angga@gmail.com", "body": "kwknklwd", "created_at": "2022-01-10T03:42:13.328Z", "updated_at": "2022-01-10T03:42:13.328Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 21, "fields": {"post": 7, "name": "coba", "email": "coba@gmail.com", "body": "Komentar", "created_at": "2022-01-10T14:09:55.084Z", "updated_at": "2022-01-10T14:09:55.084Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 22, "fields": {"post": 7, "name": "apa", "email": "apa@gmail.com", "body": "apa aja..", "created_at": "2022-01-10T14:10:11.000Z", "updated_at": "2022-01-10T14:10:11.000Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 23, "fields": {"post": 7, "name": "cahya", "email": "cahya@gmail.com", "body": "cahya", "created_at": "2022-01-10T14:10:28.268Z", "updated_at": "2022-01-10T14:10:28.268Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 24, "fields": {"post": 7, "name": "cahya", "email": "cf@gmail.com", "body": "cfreza", "created_at": "2022-01-10T14:10:54.800Z", "updated_at": "2022-01-10T14:10:54.800Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 25, "fields": {"post": 1, "name": "cahya", "email": "cahya@gmail.com", "body": "cahya", "created_at": "2022-01-10T14:11:28.994Z", "updated_at": "2022-01-10T14:11:28.994Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 26, "fields": {"post": 1, "name": "h", "email": "h@gmai.com", "body": "ggggg", "created_at": "2022-01-10T14:32:11.356Z", "updated_at": "2022-01-10T14:32:11.356Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 27, "fields": {"post": 1, "name": "apa", "email": "apa@gmail.com", "body": "apa aja boleh", "created_at": "2022-01-10T14:43:37.084Z", "updated_at": "2022-01-10T14:43:37.085Z", "active": true, "reply": 14}}, {"model": "blog.comment", "pk": 28, "fields": {"post": 2, "name": "cahya", "email": "cahya@gmail.com", "body": "Apa aja", "created_at": "2022-01-10T14:46:04.876Z", "updated_at": "2022-01-10T14:46:04.876Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 29, "fields": {"post": 2, "name": "Reza", "email": "reza@gmail.com", "body": "contoh aja", "created_at": "2022-01-10T14:46:20.311Z", "updated_at": "2022-01-10T14:46:20.311Z", "active": true, "reply": null}}, {"model": "blog.comment", "pk": 30, "fields": {"post": 2, "name": "siapa", "email": "siapa@gmail.com", "body": "siapa aja", "created_at": "2022-01-10T14:46:36.509Z", "updated_at": "2022-01-10T14:46:36.509Z", "active": true, "reply": 28}}, {"model": "auth.permission", "pk": 1, "fields": {"name": "Can add log entry", "content_type": 1, "codename": "add_logentry"}}, {"model": "auth.permission", "pk": 2, "fields": {"name": "Can change log entry", "content_type": 1, "codename": "change_logentry"}}, {"model": "auth.permission", "pk": 3, "fields": {"name": "Can delete log entry", "content_type": 1, "codename": "delete_logentry"}}, {"model": "auth.permission", "pk": 4, "fields": {"name": "Can view log entry", "content_type": 1, "codename": "view_logentry"}}, {"model": "auth.permission", "pk": 5, "fields": {"name": "Can add permission", "content_type": 2, "codename": "add_permission"}}, {"model": "auth.permission", "pk": 6, "fields": {"name": "Can change permission", "content_type": 2, "codename": "change_permission"}}, {"model": "auth.permission", "pk": 7, "fields": {"name": "Can delete permission", "content_type": 2, "codename": "delete_permission"}}, {"model": "auth.permission", "pk": 8, "fields": {"name": "Can view permission", "content_type": 2, "codename": "view_permission"}}, {"model": "auth.permission", "pk": 9, "fields": {"name": "Can add group", "content_type": 3, "codename": "add_group"}}, {"model": "auth.permission", "pk": 10, "fields": {"name": "Can change group", "content_type": 3, "codename": "change_group"}}, {"model": "auth.permission", "pk": 11, "fields": {"name": "Can delete group", "content_type": 3, "codename": "delete_group"}}, {"model": "auth.permission", "pk": 12, "fields": {"name": "Can view group", "content_type": 3, "codename": "view_group"}}, {"model": "auth.permission", "pk": 13, "fields": {"name": "Can add user", "content_type": 4, "codename": "add_user"}}, {"model": "auth.permission", "pk": 14, "fields": {"name": "Can change user", "content_type": 4, "codename": "change_user"}}, {"model": "auth.permission", "pk": 15, "fields": {"name": "Can delete user", "content_type": 4, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 16, "fields": {"name": "Can view user", "content_type": 4, "codename": "view_user"}}, {"model": "auth.permission", "pk": 17, "fields": {"name": "Can add content type", "content_type": 5, "codename": "add_contenttype"}}, {"model": "auth.permission", "pk": 18, "fields": {"name": "Can change content type", "content_type": 5, "codename": "change_contenttype"}}, {"model": "auth.permission", "pk": 19, "fields": {"name": "Can delete content type", "content_type": 5, "codename": "delete_contenttype"}}, {"model": "auth.permission", "pk": 20, "fields": {"name": "Can view content type", "content_type": 5, "codename": "view_contenttype"}}, {"model": "auth.permission", "pk": 21, "fields": {"name": "Can add session", "content_type": 6, "codename": "add_session"}}, {"model": "auth.permission", "pk": 22, "fields": {"name": "Can change session", "content_type": 6, "codename": "change_session"}}, {"model": "auth.permission", "pk": 23, "fields": {"name": "Can delete session", "content_type": 6, "codename": "delete_session"}}, {"model": "auth.permission", "pk": 24, "fields": {"name": "Can view session", "content_type": 6, "codename": "view_session"}}, {"model": "auth.permission", "pk": 25, "fields": {"name": "Can add category", "content_type": 7, "codename": "add_category"}}, {"model": "auth.permission", "pk": 26, "fields": {"name": "Can change category", "content_type": 7, "codename": "change_category"}}, {"model": "auth.permission", "pk": 27, "fields": {"name": "Can delete category", "content_type": 7, "codename": "delete_category"}}, {"model": "auth.permission", "pk": 28, "fields": {"name": "Can view category", "content_type": 7, "codename": "view_category"}}, {"model": "auth.permission", "pk": 29, "fields": {"name": "Can add post", "content_type": 8, "codename": "add_post"}}, {"model": "auth.permission", "pk": 30, "fields": {"name": "Can change post", "content_type": 8, "codename": "change_post"}}, {"model": "auth.permission", "pk": 31, "fields": {"name": "Can delete post", "content_type": 8, "codename": "delete_post"}}, {"model": "auth.permission", "pk": 32, "fields": {"name": "Can view post", "content_type": 8, "codename": "view_post"}}, {"model": "auth.permission", "pk": 33, "fields": {"name": "Can add comment", "content_type": 9, "codename": "add_comment"}}, {"model": "auth.permission", "pk": 34, "fields": {"name": "Can change comment", "content_type": 9, "codename": "change_comment"}}, {"model": "auth.permission", "pk": 35, "fields": {"name": "Can delete comment", "content_type": 9, "codename": "delete_comment"}}, {"model": "auth.permission", "pk": 36, "fields": {"name": "Can view comment", "content_type": 9, "codename": "view_comment"}}, {"model": "auth.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$180000$7CaufeTts84F$ER2Irjf0DGrAKjF3Mycnw5ztBXwkU54/O5e0b0+uXcc=", "last_login": "2022-01-04T15:02:14.511Z", "is_superuser": true, "username": "apple", "first_name": "", "last_name": "", "email": "", "is_staff": true, "is_active": true, "date_joined": "2022-01-04T15:00:46.331Z", "groups": [], "user_permissions": []}}, {"model": "blog.post", "pk": 1, "fields": {"category": 1, "parent": null, "title": "Creating Custom Model Validation In Django", "author": 1, "slug": "creating-custom-model-validation-django", "intro": "In this tutorial, we will learn how to create custom model validators using Django. Understanding The Problem Django models come with their own built-in validations, that we put while creatin", "body": "In this tutorial, we will learn how to create custom model validators using Django.\r\nUnderstanding The Problem\r\n\r\nDjango models come with their own built-in validations, that we put while creating models. However, often we require further validations on some fields. Such as the title length or age can\u2019t be lesser than a particular value or the coupon code should be in all caps.\r\n\r\nIn such scenarios building, a custom model validator is the most straightforward solution.\r\n\r\nNote: If you want validation only limited to the admin interface then read this article instead \u2013 Displaying Custom Validation Exception in Django Admin\r\n\r\nIf your goal is to create custom model validations that will remain constant throughout the app including the admin site then this tutorial is for you.\r\nCreating Custom Model Validation In Django\r\n\r\nWe will again use the blog project for this tutorial. Our goal is to create a validator that will not allow titles with less than 10 letters.\r\n\r\nCreating Custom Model Validation In DjangoThis is how our existing model looks.\r\n\r\nmodels.py\r\n\r\nfrom django.db import models\r\n\r\nclass Post(models.Model):\r\n    title = models.CharField(max_length=200, unique=True)\r\n    slug = models.SlugField(max_length=200, unique=True)\r\n    author = models.ForeignKey(\r\n        User, on_delete=models.CASCADE, related_name=\"blog_posts\")\r\n    status = models.IntegerField(choices=STATUS, default=0)\r\n    content = models.TextField()\r\n\r\n\r\n    class Meta:\r\n        ordering = [\"-created_on\"]\r\n\r\n    def __str__(self):\r\n        return self.title\r\n\r\nTo create custom model validators we need to create a clean() method within our model class.\r\n\r\nmodels.py\r\n\r\nfrom django.db import models\r\nfrom django.core.exceptions import ValidationError\r\n\r\nclass Post(models.Model):\r\n    title = models.CharField(max_length=200, unique=True)\r\n    slug = models.SlugField(max_length=200, unique=True)\r\n    author = models.ForeignKey(\r\n        User, on_delete=models.CASCADE, related_name=\"blog_posts\")\r\n    updated_on = models.DateTimeField(auto_now=True)\r\n    content = models.TextField()\r\n    created_on = models.DateTimeField(auto_now_add=True)\r\n    status = models.IntegerField(choices=STATUS, default=0)\r\n    summary = models.CharField(max_length=500, null=True, blank=True)\r\n\r\n    class Meta:\r\n        ordering = [\"-created_on\"]\r\n\r\n    def __str__(self):\r\n        return self.title\r\n\r\n    def clean(self):\r\n        if not len(self.title) > 10:\r\n            raise ValidationError(\r\n                {'title': \"Title should have at least 10 letters\"})\r\n\r\nThe clean method will raise an exception when the condition is not met.\r\n\r\nAt this point, if you save the files and went to the admin site, and try to create a post with less title less than 10 letters you would receive the error message.\r\n\r\nEven though the admin site invokes the method. The clean method is not invoked on save() or create() by default. So the best practice is to override the save method of the model and invoke the full_clean() method that under the hood calls clean and other validation hooks.", "created_at": "2022-01-04T15:28:53.030Z", "status": "active", "image": "", "thumbnail": "", "num_visits": 81, "last_visit": "2022-01-10T14:43:37.068Z"}}, {"model": "blog.post", "pk": 2, "fields": {"category": 1, "parent": null, "title": "Displaying Custom Validation Exception in Django Admin", "author": 1, "slug": "displaying-custom-validation-exception-django-admi", "intro": "Django admin site will raise exceptions when we try to save objects with non-acceptable values. Often we need to create our custom validators and raise custom exceptions depending on the needs of the project. Like if you want the phone number to be in a particular format or you want to make sure the first name starts with a capital letter.", "body": "In this tutorial, we will learn how to show custom validation exceptions on Django admin.\r\nUnderstanding The Problem\r\n\r\nDjango admin site will raise exceptions when we try to save objects with non-acceptable values. Often we need to create our custom validators and raise custom exceptions depending on the needs of the project. Like if you want the phone number to be in a particular format or you want to make sure the first name starts with a capital letter.\r\n\r\nThere are a lot of ways to achieve this but if your goal is to ensure proper validation limited from the admin interface only, then this tutorial is for you.\r\n\r\nNote: If creating validators that remain constant throughout the app is your goal, then you should check out this article \u2013 Creating Custom Model Validation In Django\r\nDisplaying Custom Validation Exception in Django Admin\r\n\r\nWe will use the popular blog project for this tutorial. The goal is to ensure that the title of the post is in the proper title case.\r\n\r\nDisplaying Custom Validation Exception in Django\r\n\r\nLet\u2019s have a look at our existing models.py and admin.py file.\r\n\r\nmodels.py\r\n\r\nclass Post(models.Model):\r\n    title = models.CharField(max_length=200, unique=True)\r\n    slug = models.SlugField(max_length=200, unique=True)\r\n    author = models.ForeignKey(\r\n        User, on_delete=models.CAS", "created_at": "2022-01-04T15:30:28.154Z", "status": "active", "image": "", "thumbnail": "", "num_visits": 7, "last_visit": "2022-01-10T14:46:36.471Z"}}, {"model": "blog.post", "pk": 3, "fields": {"category": 2, "parent": null, "title": "Creating NumPy Arrays", "author": 1, "slug": "creating-numpy-arrays", "intro": "NumPy is one of the most popular packages in the Python ecosystem. NumPy adds support to large multidimensional arrays and matrices with great efficiency.\r\nNumpy arrays are a lot faster than traditional python lists because they are stored in continuous memory that allows faster processing and accessing thus making large data processing a lot faster and convenient.", "body": "NumPy is one of the most popular packages in the Python ecosystem. NumPy adds support to large multidimensional arrays and matrices with great efficiency.\r\n\r\nNumpy arrays are a lot faster than traditional python lists because they are stored in continuous memory that allows faster processing and accessing thus making large data processing a lot faster and convenient.\r\n\r\nIn this tutorial, we will learn how to create NumPy arrays.\r\nPrerequisite\r\n\r\nYou must have Python3+ installed in your system, if that\u2019s not the case following articles can help you.\r\n\r\n    How To Install Python 3 on Mac OS\r\n    How To Install Python On Windows\r\n    How To Create Python Virtual Environments On Ubuntu\r\n\r\nSecond, you must have the latest version of NumPy installed in your system. Use the following command to install NumPy.\r\n\r\npip install numpy\r\n\r\nHow to create NumPy arrays\r\n\r\nThere are multiple ways you can create an array in Numpy, let\u2019s go over the most common ones one by one.\r\nCreating NumPy array with arrange function\r\n\r\nNumPy comes with a built-in method arrange() that\u2019s quite similar to the range() function in Python.\r\n\r\nimport numpy as np\r\na = np.arange(11) # creates a range from 0 to 10\r\nprint(a) \r\nprint(a.shape)\r\n\r\nOutput", "created_at": "2022-01-04T15:31:24.643Z", "status": "active", "image": "", "thumbnail": "", "num_visits": 90, "last_visit": "2022-01-10T03:15:30.857Z"}}, {"model": "blog.post", "pk": 4, "fields": {"category": 2, "parent": null, "title": "Python\u2019s Generator and Yield Explained", "author": 1, "slug": "pythons-generator-and-yield-explained", "intro": "An iterator is an object that can be iterated (looped) upon. It is used to abstract a container of data to make it behave like an iterable object. Some common iterable objects in Python are \u2013 lists, strings, dictionary.\r\n\r\nEvery generator is an iterator, but not vice versa. A generator is built by calling a function that has one or more yield expressions.", "body": "Generators are iterators, a kind of iterable you can only iterate over once.\r\n\r\nSo what are iterators anyway?\r\n\r\nAn iterator is an object that can be iterated (looped) upon. It is used to abstract a container of data to make it behave like an iterable object. Some common iterable objects in Python are \u2013 lists, strings, dictionary.\r\n\r\nEvery generator is an iterator, but not vice versa. A generator is built by calling a function that has one or more yield expressions.\r\n\r\nThe yieldkeyword behaves like return in the sense that values that are yielded get \u201creturned\u201d by the generator. Unlike return, the next time the generator gets asked for a value, the generator\u2019s function, resumes where it left off after the last yield statement and continues to run until it hits another yield statement.\r\n\r\nIn simpler words, a generator is simply a function that returns a generator object on which you can call next() such that for every call it returns some value until it raises a StopIteration exception, signaling that all values have been generated.\r\n\r\nLet\u2019s start with creating some generators\r\n\r\ndef my_generator():\r\n    yield \"First iterator object\"\r\n    yield \"Second iterator object\"\r\n    yield \"Third iterator object\"\r\n\r\nAs per the definition, the generator function creates a generator object you can verify this.\r\n\r\nmy_generator()\r\n\r\nOutput:\r\n\r\n<generator object my_generator at 0x7f0870635258>\r\n\r\nStore this object in a variable and call the next() method on it. Every call on next() will yield a single value until all the values have been yield.\r\n\r\ngenerator_object = my_generator()\r\nnext(generator_object)\r\n\r\nOutput:\r\n\r\nFirst iterator object\r\n\r\nAgain from the definition, every call to next will return a value until it raises a StopIteration exception, signaling that all values have been generated so for this example we can call the next method 3 times since there are only 3 yield statements to run.\r\n\r\n2nd Iteration\r\n\r\nnext(generator_object)", "created_at": "2022-01-04T15:32:17.777Z", "status": "active", "image": "", "thumbnail": "", "num_visits": 1, "last_visit": "2022-01-10T00:54:17.420Z"}}, {"model": "blog.post", "pk": 5, "fields": {"category": 2, "parent": null, "title": "How To Create Python Virtual Environments On Ubuntu", "author": 1, "slug": "how-create-python-virtual-environments-ubuntu", "intro": "It is recommended to use virtual environments to create isolated Python environments so that you can use different package versions for various projects, which is far more practical than installing Python packages system-wide.\r\n\r\nA virtual environment is a self-contained directory tree that contains dependencies required by different projects isolated to existing packages.", "body": "It is recommended to use virtual environments to create isolated Python environments so that you can use different package versions for various projects, which is far more practical than installing Python packages system-wide.\r\n\r\nA virtual environment is a self-contained directory tree that contains dependencies required by different projects isolated to existing packages.\r\n\r\nBy using virtual Python environments, applications can run in their own \u2018sandbox\u2019 in isolation of other Python applications\r\n\r\nIn this article, we will go through the creation of isolated, python virtual environments using Python\u2019s venv module.\r\n\r\n    Alternatively, you can create virtual environments in python using the virtualenv package, follow this guide to learn more https://djangocentral.com/how-to-a-create-virtual-environment-for-python/\r\n\r\nHowever, since Python 3.3 it\u2019s recommended to use venv because being part of Python it has access to the internals of Python which means it can do things the right way with far fewer hacks.\r\n\r\nFor example, virtualenv has to copy the Python interpreter binary into the virtual environment to trick it into thinking it\u2019s isolated, whereas venv can just use a configuration file that is read by the Python binary in its normal location for it to know it\u2019s supposed to act like it\u2019s in a virtual environment.\r\n\r\nSo venv can be thought of virtualenv done right, with the blessing and support of the Python developers.", "created_at": "2022-01-04T18:26:02.247Z", "status": "active", "image": "", "thumbnail": "", "num_visits": 1, "last_visit": "2022-01-09T20:16:35.638Z"}}, {"model": "blog.post", "pk": 6, "fields": {"category": 2, "parent": null, "title": "Creating Tabbed Widget With Python For GUI Application", "author": 1, "slug": "creating-tabbed-widget-python-gui-application", "intro": "In this tutorial, we will learn how to create a tabbed widget interface by using Python GUI and Tkinter package.\r\n\r\nThe <span class=\"pre\">Tkinter</span> module (\u201cTk interface\u201d) is the standard Python interface to the Tk GUI toolkit. Both Tk and <span class=\"pre\">Tkinter</span> are available on most Unix platforms, as well as on Windows systems. (Tk itself is not part of Python; it is maintained at ActiveState.)", "body": "In this tutorial, we will learn how to create a tabbed widget interface by using Python GUI and Tkinter package.\r\n\r\nThe <span class=\"pre\">Tkinter</span> module (\u201cTk interface\u201d) is the standard Python interface to the Tk GUI toolkit. Both Tk and <span class=\"pre\">Tkinter</span> are available on most Unix platforms, as well as on Windows systems. (Tk itself is not part of Python; it is maintained at ActiveState.)\r\n\r\nTkinter package is shipped with Python as a standard package, so we don\u2019t need to install anything to use it.\r\nCreating Tabbed Widget With Python\r\n\r\nimport tkinter as tk\r\nfrom tkinter import ttk\r\n\r\n# intializing the window\r\nwindow = tk.Tk()\r\nwindow.title(\"TABS\")\r\n# configuring size of the window \r\nwindow.geometry('350x200')\r\n#Create Tab Control\r\nTAB_CONTROL = ttk.Notebook(window)\r\n#Tab1\r\nTAB1 = ttk.Frame(TAB_CONTROL)\r\nTAB_CONTROL.add(TAB1, text='Tab 1')\r\n#Tab2\r\nTAB2 = ttk.Frame(TAB_CONTROL)\r\nTAB_CONTROL.add(TAB2, text='Tab 2')\r\nTAB_CONTROL.pack(expand=1, fill=\"both\")\r\n#Tab Name Labels\r\nttk.Label(TAB1, text=\"This is Tab 1\").grid(column=0, row=0, padx=10, pady=10)\r\nttk.Label(TAB2, text=\"This is Tab 2\").grid(column=0, row=0, padx=10, pady=10)\r\n#Calling Main()\r\nwindow.mainloop()\r\n\r\nSave this code and run the file you should see a tabular window as below on your screen.\r\n\r\nCreating tabbed widgets using python\r\nExplanation\r\n\r\nFirst, we are importing the tkinter modules. Next, in the object window we are initializing the widget.\r\n\r\nThen using the geometry('350x200') method we have assigned a default value for the size of the widget. This line sets th", "created_at": "2022-01-04T18:26:49.354Z", "status": "active", "image": "", "thumbnail": "", "num_visits": 2, "last_visit": "2022-01-09T20:17:56.842Z"}}, {"model": "blog.post", "pk": 7, "fields": {"category": 1, "parent": null, "title": "Creating Feeds with Django", "author": 1, "slug": "creating-feeds-django", "intro": "Django ships with built-in syndication feed generating framework, which is used to generate dynamic Atom and RSS feeds.\r\n\r\nRSS is an abbreviation for Really Simple Syndication, it\u2019s a way to have information delivered to you instead of you having to go find it. RSS is basically a structured XML document that includes full or summarized text along with other metadata such as published date, author name, etc.", "body": "Django ships with built-in syndication feed generating framework, which is used to generate dynamic Atom and RSS feeds.\r\n\r\nRSS is an abbreviation for Really Simple Syndication, it\u2019s a way to have information delivered to you instead of you having to go find it. RSS is basically a structured XML document that includes full or summarized text along with other metadata such as published date, author name, etc.\r\nCreating RSS Feeds with Django\r\n\r\nIn this article, we are going to generate feeds for a blog application following is the models.py file.\r\n\r\nclass Post(models.Model):\r\n    title = models.CharField(max_length=200, unique=True)\r\n    slug = models.SlugField(max_length=200, unique=True)\r\n    author = models.ForeignKey(\r\n        User, on_delete=models.CASCADE, related_name=\"blog_posts\"\r\n    )\r\n    updated_on = models.DateTimeField(auto_now=True)\r\n    content = models.TextField()\r\n    created_on = models.DateTimeField(auto_now_add=True)\r\n    status = models.IntegerField(choices=STATUS, default=0)\r\n\r\n    class Meta:\r\n        ordering = [\"-created_on\"]\r\n\r\n    def __str__(self):\r\n        return self.title\r\n\r\n    def get_absolute_url(self):\r\n        from django.urls import reverse\r\n        return reverse(\"post_detail\", kwargs={\"slug\": str(self.slug)})\r\n\r\nCreate a new file feeds.py inside the application directory.\r\n\r\nfrom django.contrib.syndication.views import Feed\r\nfrom django.template.defaultfilters import truncatewords\r\nfrom .models import Post\r\nfrom django.urls import reverse\r\n\r\n\r\nclass LatestPostsFeed(Feed):\r\n    title = \"My blog\"\r\n    link = \"\"\r\n    description = \"New posts of my blog.\"\r\n\r\n    def items(self):\r\n        return Post.objects.filter(status=1)\r\n\r\n    def item_title(self, item):\r\n        return item.title\r\n\r\n    def item_description(self, item):\r\n        return truncatewords(item.content, 30)\r\n\r\n    # Only needed if the model has no get_absolute_url method\r\n    # def item_link(self, item):\r\n    #     return reverse(\"post_detail\", args=[item.slug])\r\n\r\nThe title, link, and description correspond to the standard RSS <title>, <link> and <description> elements, respectively.\r\n\r\nThe items() method retrieves the objects to be included in the feed. The item_title() and item_description() methods receive each object returned by items() and return the title and description for each item. We used truncatewords built-in template filter to build the description of the blog post with the first 30 words.\r\n\r\nIn order to retrieve links of items, you must either implement get_absolute_url() in the models all item_link() in the Post feed class.\r\n\r\nNext map the feed in urls.py file.\r\n\r\nfrom .feeds import LatestPostsFeed\r\n\r\nurlpatterns = [\r\n    path(\"feed/rss\", LatestPostsFeed(), name=\"post_feed\"),\r\n               ]\r\n\r\nNow Django will build RSS 2.0 feed at /feed/rss\r\n\r\nSave the file run the server and navigate to http://127.0.0.1:8000/feed/rss you should see the XML file.\r\n\r\nUse this XML Formatter tool to see the feed in a user-friendly form, here is an example feed.", "created_at": "2022-01-04T18:27:35.152Z", "status": "active", "image": "", "thumbnail": "", "num_visits": 7, "last_visit": "2022-01-10T14:10:54.766Z"}}, {"model": "blog.post", "pk": 8, "fields": {"category": 1, "parent": null, "title": "Adding Custom Model Managers In Django", "author": 1, "slug": "adding-custom-model-managers-django", "intro": "A manager is an interface through which database query operations are provided to Django models. At least one <span class=\"pre\">Manager</span> exists for every model in a Django application, objects is the default manager of every model that retrieves all objects in the database.", "body": "A manager is an interface through which database query operations are provided to Django models. At least one <span class=\"pre\">Manager</span> exists for every model in a Django application, objects is the default manager of every model that retrieves all objects in the database.\r\n\r\nHowever, one model can have multiple model managers, we can also build our own custom model managers by extending the base manager class.\r\n\r\nIn this article, we will learn how to create custom model managers in Django.\r\nCreating Custom Model Managers\r\n\r\nIn this article, we will build a model manager for a blog application.\r\n\r\nclass Post(models.Model):\r\n    title = models.CharField(max_length=200)\r\n    content = models.TextField()\r\n    created = models.DateTimeField(auto_now_add=True)\r\n    updated = models.DateTimeField(auto_now=True)\r\n    active = models.BooleanField(default=False)\r\n\r\n    def __str__(self):\r\n        return self.title\r\n\r\nAs we know objects is the default model manager for every model, therefore Post.objects.all() will return all post objects.\r\n\r\nThe objects method is capable of doing all basic QuerySets then why would we need a custom model manager?\r\n\r\nThere are two reasons you might want to customize a Manager \u2013\r\n\r\n    To add extra Manager methods.\r\n    To modify the initial QuerySet the Manager returns.\r\n\r\nLet\u2019s create a model manager to retrieve all the published posts.\r\n\r\nUsing the objects manager published posts can be retrieved with the following query.\r\n\r\nIn : Post.objects.filter(active=True)      \r\nOut:  <QuerySet [<Post: Fourth Post>, <Post: First post>]>\r\n\r\nWe will build a custom model manager called published to retrieve the published posts.\r\n\r\nclass PublishedManager(models.Manager):\r\n    def get_queryset(self):\r\n        return super(PublishedManager, self).get_queryset().filter(active=True)", "created_at": "2022-01-04T18:28:21.532Z", "status": "active", "image": "", "thumbnail": "", "num_visits": 0, "last_visit": null}}, {"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2022-01-04T15:26:23.325Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "Django", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2022-01-04T15:26:35.203Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Python", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2022-01-04T15:28:53.067Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Creating Custom Model Validation In Django", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2022-01-04T15:30:28.202Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "Displaying Custom Validation Exception in Django Admin", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2022-01-04T15:31:24.670Z", "user": 1, "content_type": 8, "object_id": "3", "object_repr": "Creating NumPy Arrays", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2022-01-04T15:32:17.793Z", "user": 1, "content_type": 8, "object_id": "4", "object_repr": "Python\u2019s Generator and Yield Explained", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 7, "fields": {"action_time": "2022-01-04T18:26:02.343Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "How To Create Python Virtual Environments On Ubuntu", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 8, "fields": {"action_time": "2022-01-04T18:26:49.355Z", "user": 1, "content_type": 8, "object_id": "6", "object_repr": "Creating Tabbed Widget With Python For GUI Application", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 9, "fields": {"action_time": "2022-01-04T18:27:35.164Z", "user": 1, "content_type": 8, "object_id": "7", "object_repr": "Creating Feeds with Django", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 10, "fields": {"action_time": "2022-01-04T18:28:21.534Z", "user": 1, "content_type": 8, "object_id": "8", "object_repr": "Adding Custom Model Managers In Django", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}]